package routines;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.commons.dbcp2.BasicDataSource;
import org.apache.log4j.Logger;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.client.RestTemplate;

public class SEOProcessOrchestrator {

  private JdbcTemplate  jdbcTemplate      = null;
  private static String response          = "";

  private Integer       Trigger_Flag      = null;

  SimpleDateFormat      dbFormatter       = new SimpleDateFormat("yyyy-MM-dd");
  SimpleDateFormat      jsonFormatter     = new SimpleDateFormat("yyyy-MMM-dd");

  private final String  SQL_SERVER_DRIVER = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
  /* LOCAL Setting*/
//  private final String  URL	= "jdbc:sqlserver://DESKTOP-0ROISII:1433;databaseName=SEO";
//  private final String  DB_USERNAME       = "sa";
//  private final String  DB_PASSWORD       = "lrl4337";

  /* SERVER Setting*/
  private final String  URL	= "jdbc:sqlserver://172.31.19.187:1433;databaseName=SEO_Master_Schema";
  private final String  DB_USERNAME       = "engro";
  private final String  DB_PASSWORD       = "Engr0$30";

  private final Integer Enabled           = 1;
  private final Integer Disabled          = 0;
  private final Integer Training          = 1;
  private final Integer Prediction        = 2;
  private final Integer Failure           = 0;
  private final Integer Success           = 1;
  private final Integer Not_Applicable    = 2;
  private final Integer No_Warning        = 0;
  private final Integer Warning           = 1;
  private final Integer Zero              = 0;

  public SEOProcessOrchestrator() {
    super();
    jdbcTemplate = new JdbcTemplate(getDataSource());
  }

  private BasicDataSource getDataSource() {

    BasicDataSource dataSource = new BasicDataSource();
    dataSource.setDriverClassName(SQL_SERVER_DRIVER);
    dataSource.setUrl(URL);
    dataSource.setUsername(DB_USERNAME);
    dataSource.setPassword(DB_PASSWORD);

    return dataSource;
  }

  public static String execute() {

    //System.out.println(userName + "==="  + password);
    SEOProcessOrchestrator sEOProcessOrchestrator = new SEOProcessOrchestrator();
    sEOProcessOrchestrator.processOrchestrator();

    return "Batch completed";
  }

  public String processOrchestrator() {

    Trigger_Flag = Zero;
    // Get All customers
    List<String> customers = getDistinctCustomers();

    System.out.println("\n\n\n############# Batch Started #############");
    System.out.println("Customers:" + customers);

    // For each customer check new data.
    for (String customer : customers) {

      System.out.println("Current processing customer: " + customer);
      // Get all potlines with Customer
      List<Map<String, Object>> allpotlinesWithCustomer = getAllPotlinesWithCustomer(customer);

      if (allpotlinesWithCustomer.isEmpty())
        System.out.println("No SEO_Config availble for customer:" + customer);

      for (Map<String, Object> map : allpotlinesWithCustomer) {
        String potline = (String) map.get("Potline_ID");
        Integer processedFlag = (Integer) map.get("Processed_Flag");
        if (null != processedFlag && processedFlag.equals(1))
          checkRunnableFlag(potline, customer); // Step 3
        else
          exit(potline, customer); // Step 1.3
      }

    } // end customer loop
    System.out.println("############# Batch Completed #############");
    return "Batch completed";
  }

  // Step 1.3
  private void exit(String potline, String customer) {

    Map<String, Object> sEOConfigFields = getSEOConfigFields(potline, customer);
    Integer Run_Mode_ID = (Integer) sEOConfigFields.get("Run_Mode_ID");
    String UpdateQry = "";
    if (null != Run_Mode_ID && Run_Mode_ID.equals(Training)) {
      UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
      UpdateQry += ", Training_Run_Status = '" + Success + "'";
      UpdateQry += " where  Customer_Alias ='" + customer + "'";
      UpdateQry += " and Potline_ID  ='" + potline + "'";
      executeQuery(UpdateQry);
    } else {
      UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
      UpdateQry += ", Prediction_Run_Status = '" + Success + "'";
      UpdateQry += " where  Customer_Alias ='" + customer + "'";
      UpdateQry += " and Potline_ID  ='" + potline + "'";
      executeQuery(UpdateQry);
    }

  }

  // Step 3
  private void checkRunnableFlag(String potline, String customer) {

    System.out.println("<<<<<<<<<<<<< Step 3 checkRunnableFlag start>>>>>>>>>>>>>");
    // Check the Runnable_Flag per potline for Customer X in table SEO_Config.
    Map<String, Object> sEOConfigFields = getSEOConfigFields(potline, customer);
    Integer RunnableFlag = (Integer) sEOConfigFields.get("Runnable_flag");
    Integer Common_Training_Set_Flag = (Integer) sEOConfigFields.get("Common_Training_Set_Flag");
    String Training_PKL_Folder_Path = (String) sEOConfigFields.get("Training_PKL_Folder_Path");
    Integer Run_Mode_ID = (Integer) sEOConfigFields.get("Run_Mode_ID");

    System.out.println("Customer:" + customer + "  RunnableFlag:" + RunnableFlag + "  Common_Training_Set_Flag:"
        + Common_Training_Set_Flag + "  Training_PKL_Folder_Path:" + Training_PKL_Folder_Path + "  Run_Mode_ID:"
        + Run_Mode_ID);
    // Step 3.1
    if (null != RunnableFlag && RunnableFlag.equals(Enabled)) {

      // Step 3.3 check if the data has been flushed per potline for Customer X
      Integer count = isDataFlushPerPotlineCustomer(customer, potline);
      // Step 3.4 If the count is zero, then exit
      if (count == 0) {
        exitBecauseDataFlush(customer, potline, Run_Mode_ID);
      }
      // Step 3.5 If the count is greater than 0, that means the data has not
      // been flushed
      else {
        // Step 3.7
        if (null != Common_Training_Set_Flag && Common_Training_Set_Flag.equals(Enabled)) {
          /*
           * set the Training_PKL_Filename in the table SEO_Config per potline
           * for Customer X to Common_champion_trained_model.pkl
           */
          updateTraining_PKL_Filename(potline, customer);

          /* Check whether the Common Training PKL File exists */
          String file = Training_PKL_Folder_Path + "\\Common_champion_trained_model.pkl";
          System.out.println("File Location: " + file);
          File f = new File(file);
          // Step 3.9 If the Training PKL file exists then set Run_Mode_ID to
          // Prediction
          // Mode and
          // proceed to Step 4
          if (f.exists()) {
            System.out.println("File Found");
            setRun_Mode_ID(potline, customer, Prediction);
            Run_Mode_ID = Prediction;
            // Move on to Step 4
            checkRunMode(potline, customer, Run_Mode_ID);

          }
          // Step 3.8 If file is missing
          else {
            System.out.println("File Not Found");
            String UpdateQry = "";
            if (null != Run_Mode_ID && Run_Mode_ID.equals(Training)) {
              UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
              UpdateQry += ", Training_Run_Status = '" + Failure + "'";
              UpdateQry += ", Training_Run_Message = 'Missing Common Training File' ";
              UpdateQry += " where  Customer_Alias ='" + customer + "'";
              UpdateQry += " and Potline_ID  ='" + potline + "'";
              executeQuery(UpdateQry);
            } else {
              UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
              UpdateQry += ", Prediction_Run_Status = '" + Failure + "'";
              UpdateQry += ", Prediction_Run_Message = 'Missing Common Training File' ";
              UpdateQry += " where  Customer_Alias ='" + customer + "'";
              UpdateQry += " and Potline_ID  ='" + potline + "'";
              executeQuery(UpdateQry);
            }

          }

        } else {
          // Step 3.6 If Common_Training_Set_Flag is disabled, then proceed to
          // Step 4.
          checkRunMode(potline, customer, Run_Mode_ID);
        }
      }
    } else {
      /* Step 3.2 If Runnable flag is disabled */
      String UpdateQry = "";
      if (null != Run_Mode_ID && Run_Mode_ID.equals(Training)) {
        UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
        UpdateQry += ", Training_Run_Status = '" + Not_Applicable + "'";
        UpdateQry += ", Training_Run_Message = 'Not Runnable' ";
        UpdateQry += " where  Customer_Alias ='" + customer + "'";
        UpdateQry += " and Potline_ID  ='" + potline + "'";
        executeQuery(UpdateQry);
      } else {
        UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
        UpdateQry += ", Prediction_Run_Status = '" + Not_Applicable + "'";
        UpdateQry += ", Prediction_Run_Message = 'Not Runnable' ";
        UpdateQry += " where  Customer_Alias ='" + customer + "'";
        UpdateQry += " and Potline_ID  ='" + potline + "'";
        executeQuery(UpdateQry);
      }

    }
  }

  // Step 4
  private void checkRunMode(String potline, String customer, Integer Run_Mode_ID) {

    System.out.println("<<<<<<<<<<<<< Step 4 checkRunMode start>>>>>>>>>>>>>");
    // Move on to Step 5
    if (null != Run_Mode_ID && Run_Mode_ID.equals(Training))
      callTraining(potline, customer, Run_Mode_ID);
    // Move on to Step 6
    if (null != Run_Mode_ID && Run_Mode_ID.equals(Prediction))
      callPrediction(potline, customer, Run_Mode_ID);
  }

  // Step 5
  private void callTraining(String potline, String customer, Integer run_Mode_ID) {

    System.out.println("<<<<<<<<<<<<< Step 5 Training start>>>>>>>>>>>>>");
    // Step 5.1 Prepare training dates
    Map<String, Object> sEOConfigFields = getSEOConfigFields(potline, customer);
    Date Training_Start_Date = (Date) sEOConfigFields.get("Training_Start_Date");
    Date Training_End_Date = (Date) sEOConfigFields.get("Training_End_Date");

    // If Training_Start_Date and Training_End_Date are null, then calculate the
    // training dates based on the first 70% subset of the whole dataset per
    // potline
    // for Customer X in table SEO_Data.
    if (null == Training_Start_Date && null == Training_End_Date) {
      Map<String, Object> minmaxDates = getMinMaxDates(customer, potline);
      Date minDate = (Date) minmaxDates.get("minDate");
      Date maxDate = (Date) minmaxDates.get("maxDate");
      Long diffInMillies = Math.abs(maxDate.getTime() - minDate.getTime());
      Long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
      Double seventyPer = (Double) (diff * 0.7);
      Training_Start_Date = minDate;
      Training_End_Date = addDays(Training_Start_Date, seventyPer.intValue());
      setTrainingDates(customer, potline, Training_Start_Date, Training_End_Date);
    }

    // Verify the date range between Training_Start_Date and Training_End_Date
    int dateRange = getMonthsBetweenDates(Training_Start_Date, Training_End_Date);
    if (dateRange <= 6)
      setWarningFlag(customer, potline, Warning);
    else
      setWarningFlag(customer, potline, No_Warning);

    // Step 5.2 Prepare the model input per potline for Customer X
    String modelJson = prepareTrainingModelInput(customer, potline);
    System.out.println(modelJson);

    /* Step 5.3 Execute Model */
    // Step 5.3.1
    String response = executeModelFromTraining(modelJson);

    // Step 5.3.2
    if (response.equalsIgnoreCase("SUCCESFULL")) {
      Map<String, Object> sEO_ConfigFields = getSEOConfigFields(potline, customer);
      String Training_PKL_Folder_Path = (String) sEO_ConfigFields.get("Training_PKL_Folder_Path");
      String Training_PKL_Filename = (String) sEO_ConfigFields.get("Training_PKL_File_Name");
      /* Check whether the Common Training PKL File exists */
      String file = Training_PKL_Folder_Path + "\\" + Training_PKL_Filename;
      File f = new File(file);
      // Step 5.3.3 - If the Training File exists
      if (f.exists()) {
        String UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
        UpdateQry += ", Training_Last_Run_Time = GETDATE()";
        UpdateQry += ", Training_Run_Status = '" + Success + "'";
        UpdateQry += ", Training_Run_Message = null ";
        UpdateQry += ", Run_Mode_ID = '" + Prediction + "'";
        UpdateQry += " where  Customer_Alias ='" + customer + "'";
        UpdateQry += " and Potline_ID  ='" + potline + "'";
        executeQuery(UpdateQry);
        // Go to Step 4
        checkRunMode(potline, customer, Prediction);
      } else {
        // Step If the Training File does not exist
        // Step 5.3.4
        String UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
        UpdateQry += ", Training_Last_Run_Time = null";
        UpdateQry += ", Training_Run_Status = '" + Failure + "'";
        UpdateQry += ", Training_Run_Message = 'Model Execution fail or file does not exists' ";
        UpdateQry += " where  Customer_Alias ='" + customer + "'";
        UpdateQry += " and Potline_ID  ='" + potline + "'";
        executeQuery(UpdateQry);

      }
    }
    // IF the execution fails
    else {
      // Step 5.3.4
      String UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
      UpdateQry += ", Training_Last_Run_Time = null";
      UpdateQry += ", Training_Run_Status = '" + Failure + "'";
      UpdateQry += ", Training_Run_Message = 'Model Execution fail or file does not exists' ";
      UpdateQry += " where  Customer_Alias ='" + customer + "'";
      UpdateQry += " and Potline_ID  ='" + potline + "'";
      executeQuery(UpdateQry);
    }
  }

  // Step 6
  private void callPrediction(String potline, String customer, Integer run_Mode_ID) {

    System.out.println("<<<<<<<<<<<<< Step 6 Prediction start>>>>>>>>>>>>>");
    // Step 6.1 Check prediction dates
    Map<String, Object> sEO_ConfigFields = getSEOConfigFields(potline, customer);
    Date Prediction_Start_Date = (Date) sEO_ConfigFields.get("Prediction_Start_Date");
    Date Prediction_End_Date = null;

    // Always set the Prediction_End_Date to the maximum date per potline
    Map<String, Object> minmaxDates = getMinMaxDates(customer, potline);
    Date minDate = (Date) minmaxDates.get("minDate");
    Date maxDate = (Date) minmaxDates.get("maxDate");
    Prediction_End_Date = maxDate;
    // setPredictionDates(customer, potline, maxDate);

    if (Prediction_Start_Date == null) {

      Long diffInMillies = Math.abs(maxDate.getTime() - minDate.getTime());
      Long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
      Double seventyPer = (Double) (diff * 0.7);
      Prediction_Start_Date = addDays(minDate, seventyPer.intValue() + 1);
    }
    setPredictionDates(customer, potline, Prediction_Start_Date, Prediction_End_Date);

    // Step 6.2 Prepare the model input per potline for Customer X
    String modelJson = preparePredictionModelInput(customer, potline, Prediction_Start_Date, Prediction_End_Date);

    /* Step 6.3 Execute Model */
    String response = executeModelFromPrediction(modelJson);

    if (response.equalsIgnoreCase("SUCCESFULL")) {

      if (null != Trigger_Flag && Trigger_Flag.equals(Zero)) {
        String UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
        UpdateQry += ", Prediction_Run_Status = '" + Success + "'";
        UpdateQry += ", Processed_Flag = 0";
        UpdateQry += ", Prediction_Run_Message = null ";
        UpdateQry += ", Prediction_Last_Run_Time = '" + dbFormatter.format(Prediction_End_Date) + "'";
        UpdateQry += ", Prediction_Start_Date = '" + dbFormatter.format(Prediction_End_Date) + "'";
        UpdateQry += " where  Customer_Alias ='" + customer + "'";
        UpdateQry += " and Potline_ID  ='" + potline + "'";
        executeQuery(UpdateQry);
      } else {
        String UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
        UpdateQry += ", Prediction_Run_Status = '" + Success + "'";
        UpdateQry += ", Processed_Flag = 0";
        UpdateQry += ", Prediction_Run_Message = null ";
        UpdateQry += ", Prediction_Last_Run_Time = '" + dbFormatter.format(Prediction_End_Date) + "'";
        UpdateQry += " where  Customer_Alias ='" + customer + "'";
        UpdateQry += " and Potline_ID  ='" + potline + "'";
        executeQuery(UpdateQry);
      }

    } // IF the execution fails
    else {
      String UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
      UpdateQry += ", Prediction_Last_Run_Time = null";
      UpdateQry += ", Prediction_Run_Status = '" + Failure + "'";
      UpdateQry += ", Prediction_Run_Message = 'Model Execution fail or file does not exists' ";
      UpdateQry += " where  Customer_Alias ='" + customer + "'";
      UpdateQry += " and Potline_ID  ='" + potline + "'";
      executeQuery(UpdateQry);
    }
  }

  private void setRun_Mode_ID(String potline, String customer, Integer mode) {
    // Update Query
    String UpdateQry = "UPDATE [SEO_Config] SET Run_Mode_ID = '" + mode + "'";
    UpdateQry += " where  Customer_Alias ='" + customer + "'";
    UpdateQry += " and Potline_ID  ='" + potline + "'";

    executeQuery(UpdateQry);
  }

  private void updateTraining_PKL_Filename(String potline, String customer) {
    // Update Query
    String UpdateQry = "UPDATE [SEO_Config] SET Training_PKL_File_Name = 'Common_champion_trained_model.pkl'";
    UpdateQry += " where  Customer_Alias ='" + customer + "'";
    UpdateQry += " and Potline_ID  ='" + potline + "'";

    executeQuery(UpdateQry);
  }

  private Map<String, Object> getSEOConfigFields(String potline, String customer) {
    String sql = "select Runnable_flag, Common_Training_Set_Flag, Training_PKL_Folder_Path,Training_PKL_File_Name,Run_Mode_ID,Training_Start_Date,Training_End_Date,Prediction_Start_Date"
        + " from SEO_Config where Customer_Alias =? and Potline_ID = ?";

    return (Map<String, Object>) jdbcTemplate.queryForMap(sql, customer, potline);
  }

  private Map<String, Object> getMinMaxDates(String customer, String potline) {
    String sql = "select min(Date_Of_Record) as minDate, max(Date_Of_Record) as maxDate "
        + " from SEO_Data where Customer_Alias =? and Potline_ID=?";

    return (Map<String, Object>) jdbcTemplate.queryForMap(sql, customer, potline);
  }

  private List<Map<String, Object>> getAllPotlinesWithCustomer(String customer) {

    String sql = "select Potline_ID, Processed_Flag from SEO_Config where Customer_Alias =? ";

    return (List<Map<String, Object>>) jdbcTemplate.queryForList(sql, customer);
  }

  /*
   * private List<String> getAllPotlinesWithCustomer(String customer) {
   * 
   * String sql = "select Potline_ID from SEO_Config where Customer_Alias ='" +
   * customer + "'";
   * 
   * return jdbcTemplate.queryForList(sql, String.class); }
   */

  private List<String> getDistinctCustomers() {

    String sql = "SELECT distinct Customer_Alias FROM SEO_Data";

    return jdbcTemplate.queryForList(sql, String.class);
  }

  private Date addDays(Date date, int days) {
    GregorianCalendar cal = new GregorianCalendar();
    cal.setTime(date);
    cal.add(Calendar.DATE, days);

    return cal.getTime();
  }

  private int getMonthsBetweenDates(Date startDate, Date endDate) {

    Calendar startCalendar = new GregorianCalendar();
    startCalendar.setTime(startDate);
    Calendar endCalendar = new GregorianCalendar();
    endCalendar.setTime(endDate);

    int diffYear = endCalendar.get(Calendar.YEAR) - startCalendar.get(Calendar.YEAR);
    int diffMonth = diffYear * 12 + endCalendar.get(Calendar.MONTH) - startCalendar.get(Calendar.MONTH);
    return diffMonth;
  }

  private String executeModelFromTraining(String modelJson) {

    RestTemplate restTemplate = new RestTemplate();
    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_JSON);

    HttpEntity<String> request = new HttpEntity<String>(modelJson, headers);
    String response = restTemplate.getForObject("https://test-cloudfoundry.run.aws-usw02-pr.ice.predix.io/getMessageB",
        String.class);
    return response.toString();
  }

  private String executeModelFromPrediction(String modelJson) {

    RestTemplate restTemplate = new RestTemplate();
    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_JSON);

    HttpEntity<String> request = new HttpEntity<String>(modelJson, headers);
    String response = restTemplate.getForObject("https://test-cloudfoundry.run.aws-usw02-pr.ice.predix.io/getMessageB",
        String.class);
    return response.toString();
  }

  private String prepareTrainingModelInput(String customer, String potline) {
    JSONObject modelJson = new JSONObject();
    Date date = new Date();
    try {
      modelJson.put("modelrun", customer + "_" + potline + "_" + "Training");
      modelJson.put("rundatetime", jsonFormatter.format(date));
      modelJson.put("missingrundays", 0);
    } catch (JSONException e) {
      e.printStackTrace();
    }

    return modelJson.toString();
  }

  private String preparePredictionModelInput(String customer, String potline, Date Prediction_Start_Date,
      Date Prediction_End_Date) {

    Long diffInMillies = Math.abs(Prediction_End_Date.getTime() - Prediction_Start_Date.getTime());
    Long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
    int missingrundays = diff.intValue() - 1;

    JSONObject modelJson = new JSONObject();
    try {
      modelJson.put("modelrun", customer + "_" + potline + "_" + "Prediction");
      modelJson.put("rundatetime", jsonFormatter.format(Prediction_End_Date));
      modelJson.put("missingrundays", missingrundays);
    } catch (JSONException e) {
      e.printStackTrace();
    }

    return modelJson.toString();
  }

  private void setWarningFlag(String customer, String potline, Integer warningFlag) {
    String UpdateQry = "UPDATE [SEO_Config] SET Training_Warning_Flag ='" + warningFlag + "'";
    UpdateQry += " where  Customer_Alias ='" + customer + "'";
    UpdateQry += " and Potline_ID  ='" + potline + "'";
    executeQuery(UpdateQry);

  }

  private void setTrainingDates(String customer, String potline, Date training_Start_Date, Date training_End_Date) {

    String UpdateQry = "UPDATE [SEO_Config] SET";
    UpdateQry += " Training_Start_Date = '" + dbFormatter.format(training_Start_Date) + "'";
    UpdateQry += ", Training_End_Date = '" + dbFormatter.format(training_End_Date) + "'";
    UpdateQry += " where  Customer_Alias ='" + customer + "'";
    UpdateQry += " and Potline_ID  ='" + potline + "'";

    executeQuery(UpdateQry);
  }

  private void setPredictionDates(String customer, String potline, Date Prediction_Start_Date, Date prediction_End_Date) {
    String UpdateQry = "UPDATE [SEO_Config] SET";
    UpdateQry += " Prediction_Start_Date = '" + dbFormatter.format(Prediction_Start_Date) + "'";
    UpdateQry += ", Prediction_End_Date = '" + dbFormatter.format(prediction_End_Date) + "'";
    UpdateQry += " where  Customer_Alias ='" + customer + "'";
    UpdateQry += " and Potline_ID  ='" + potline + "'";

    executeQuery(UpdateQry);
  }

  private void exitBecauseDataFlush(String customer, String potline, Integer run_Mode_ID) {
    String UpdateQry = "";
    if (null != run_Mode_ID && run_Mode_ID.equals(Training)) {
      UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
      UpdateQry += ", Training_Run_Status = '" + Failure + "'";
      UpdateQry += ", Training_Run_Message = 'Data Flushed'";
      UpdateQry += " where  Customer_Alias ='" + customer + "'";
      UpdateQry += " and Potline_ID  ='" + potline + "'";
      executeQuery(UpdateQry);
    } else {
      UpdateQry = "UPDATE [SEO_Config] SET Last_Run_Time = GETDATE()";
      UpdateQry += ", Prediction_Run_Status = '" + Failure + "'";
      UpdateQry += ", Prediction_Run_Message = 'Data Flushed' ";
      UpdateQry += " where  Customer_Alias ='" + customer + "'";
      UpdateQry += " and Potline_ID  ='" + potline + "'";
      executeQuery(UpdateQry);
    }

  }

  private Integer isDataFlushPerPotlineCustomer(String customer, String potline) {

    String sql = "select count(*) from SEO_Data";
    sql += " where  Customer_Alias ='" + customer + "'";
    sql += " and Potline_ID  ='" + potline + "'";

    return this.jdbcTemplate.queryForObject(sql, Integer.class);

  }

  private void executeQuery(String UpdateQry) {
    this.jdbcTemplate.execute(UpdateQry);
  }
}
